package ca.ualberta.c301w19t14.onebook.models;

import android.support.annotation.NonNull;

import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.auth.UserProfileChangeRequest;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;

/**
 * This class is for the user and encompasses borrowers and owners
 * @author CMPUT301 Team14
 * @see ca.ualberta.c301w19t14.onebook.activities.UserLoginActivity
 * @version 1.0
 */
public class User {

    private String uid;
    private String name;
    private String email;

    /**
     *
     */
    public User() {
    }

    /**
     *
     * @param uid
     * @param name
     * @param email
     */
    public User( String uid, String name, String email){
        this.uid = uid;
        this.name = name;
        this.email = email;
    }

    /**
     * updates the firebase database
     * @param firebaseUid
     */
    public static void updateDatabase(final String firebaseUid) {
        FirebaseDatabase database = FirebaseDatabase.getInstance();
        DatabaseReference myRef = database.getReference("Users");
        FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();
        final User userClass = new User(firebaseUid, user.getDisplayName(), user.getEmail());
        myRef.addListenerForSingleValueEvent(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                if(!dataSnapshot.child(firebaseUid).exists()) {
                    Notification newUser = new Notification("Welcome to OneBook", "Borrow your first book in seconds. Get started by opening the menu.", userClass, Notification.ROCKET);
                    newUser.save();
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError databaseError) {

            }
        });

        myRef.child(firebaseUid).setValue(userClass);

    }

    /**
     * updates the user's email
     * @param firebaseUid
     * @param new_email
     */
    public static void updateEmail(final String firebaseUid, String new_email) {
        FirebaseAuth.getInstance().getCurrentUser().updateEmail(new_email);
        updateDatabase(firebaseUid);
    }

    /**
     * updates the user's name
     * @param firebaseUid
     * @param new_name
     */
    public static void updateName(final String firebaseUid, String new_name) {
        FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();
        user.updateProfile(new UserProfileChangeRequest.Builder().setDisplayName(new_name).build());
        updateDatabase(firebaseUid);
    }

    /**
     * updates the user's passwords
     * @param firebaseUid
     * @param new_password
     */
    public static void updatePassword(final String firebaseUid, String new_password) {
        FirebaseAuth.getInstance().getCurrentUser().updatePassword(new_password);
        updateDatabase(firebaseUid);
    }

    /**
     * updates the user's name
     * @param username
     * @return
     */
    protected boolean changeUsername(String username) {
        boolean is_success = false;

        return is_success;
    }

    /**
     * changes a user's password.
     * @param password
     * @return
     */
    protected boolean changePassword(String password) {
        boolean is_success = false;

        return is_success;
    }

    /**
     * updates a user's contact information
     * @param email
     * @param phone
     */
    public void editContactInfo( String email, long phone) {
        boolean is_success = false;
    }

    /**
     * setter email
     * @param email
     */
    public void setEmail(String email) {
        this.email = email;
    }

    /**
     * getter for user id. user id's are automatically generated by firebase
     * @return
     */
    public String getUid(){ return this.uid; }

    /**
     * getter for user name
     * @return
     */
    public String getName(){ return this.name; }

    /**
     * getter for email
     * @return
     */
    public String getEmail() {
        return email;
    }

    /**
     * set user id
     * @param uid
     */
    public void setUid(String uid) {
        this.uid = uid;
    }

    /**
     * set user name
     * @param name
     */
    public void setName(String name) {
        this.name = name;
    }
}

